---
# Prepare nodes for postgres and multimaster
# Connecting to root
- name: Update systems and create user
  hosts: mm1,mm2
  tags: prepare
  tasks:
  - name: Install updates
    apt:
      upgrade: dist
      update_cache: yes

  - name: Install packages
    apt:
      name:
      - flex
      - bison
      - libreadline-dev
      - gcc
      - g++
      - clang
      - make
      - cmake
      - libipc-run-perl
  
  - name: Create postgres user
    user: 
      name: postgres
      shell: /bin/bash
      password: $6$uSe5/bgoRHyCJV22$RgSG1ZI5T/49iL8LP6a1eA32vYNvTD/t.bFWrMVo60IonMqjZv.DVGTceSvCg413iskR/uZsjDVu5QyZN2Tto0

  - name: Add postgres to sudoers
    shell: sudo usermod -aG sudo postgres

  - name: Copy hosts to nodes
    copy:
      src: hosts
      dest: /etc/hosts

  - name: Update PATH env var
    shell: |
      echo "export PATH=$PATH:/home/postgres/pgsql/bin" | tee -a ~/.bashrc

# Build postgres and multimaster
- name: Prepare for multimasters
  hosts: mm1,mm2
  remote_user: postgres 
  environment:
    PATH: "{{ ansible_env.PATH }}:/home/postgres/pgsql/bin"
  tasks:
  - name: Clone modified postgres
    tags: pg,build
    git:
      repo: https://github.com/postgrespro/postgres_cluster.git
      dest: /home/postgres/postgres_cluster
      version: rel13_mm_2

  - name: Clone multimaster
    tags: mm,build
    git:
      repo: https://github.com/postgrespro/mmts.git
      dest: /home/postgres/postgres_cluster/contrib/mmts
      version: PGPRO-6254

  - name: Compile postgres
    tags: pg,build
    shell: |
      ./configure --prefix='/home/postgres/pgsql'
      make
      make install
    args:
      chdir: /home/postgres/postgres_cluster

  - name: Compile multimaster
    tags: mm,build
    shell: make install
    args:
      chdir: /home/postgres/postgres_cluster/contrib/mmts

  - name: Compile pg_stat_statements
    tags: build
    shell: make install
    args:
      chdir: /home/postgres/postgres_cluster/contrib/pg_stat_statements

  - name: Update PATH env var
    tags: env
    shell: |
      echo "export PATH=$PATH:/home/postgres/pgsql/bin" | tee -a ~/.bashrc

  - name: Remove pgsql
    tags: rmpgsql
    shell: rm -rf /usr/local/pgsql

# Configure and control pg
  - name: Create PGDATA
    tags: pgdata,install
    shell: mkdir ./db

  - name: Init database
    tags: initdb,install
    shell: initdb -D ./db
    register: out

  - debug:
      msg: "{{out.stdout_lines}} {{out.stderr_lines}}"
    tags: initdb,install
  
  - name: Copy config files
    tags: copy,cfg,install
    copy:
      src: "{{ item }}"
      dest: ./db
      owner: postgres
    with_items:
      - pg_hba.conf
      - postgresql.conf
  
  - name: Copy pgpass
    tags: copy,pgpass,install
    copy:
      src: pgpass
      dest: /home/postgres/.pgpass
      owner: postgres
      mode: '0600'

  - name: Copy bootstrap.sql
    tags: copy,bootstrap,install
    copy:
      src: "{{ item }}"
      dest: /home/postgres/
      owner: postgres
    with_items:
      - bootstrap.sql

  - name: Start postgres
    tags: start,install
    shell: pg_ctl -D ./db -l ./db/logfile start
    register: out

  - debug: 
      msg: "{{out.stdout_lines}} {{out.stderr_lines}}"
    tags: start,install

  - name: Bootstrpap db
    tags: bootstrap,install
    shell: psql -f bootstrap.sql
    register: out

  - debug: 
      msg: "{{out.stdout_lines}} {{out.stderr_lines}}"
    tags: bootstrap,install
  
  - name: Stop postgres
    tags: stop,uninstall
    shell: pg_ctl -D ./db stop
    register: out

  - debug: 
      msg: "{{out.stdout_lines}} {{out.stderr_lines}}"
    tags: stop
 
  - name: Remove PGDATA
    tags: rmpgdata,uninstall
    shell: rm -rf ./db

  - name: Status postgres
    tags: status
    shell: pg_ctl -D ./db status
    register: out

  - debug: 
      msg: "{{out.stdout_lines}} {{out.stderr_lines}}"
    tags: status
  
# Nodes that will init multimasters
- name: Init multimaster clusters
  hosts: init1, init2
  remote_user: postgres
  environment:
    PATH: "{{ ansible_env.PATH }}:/home/postgres/pgsql/bin"
  tags: clusters
  tasks:
  - name: Copy init files
    copy:
      src: "{{ mtm_file }}"
      dest: /home/postgres
    register: out

  - name: Init multimaster
    shell: psql -U mtmuser -d mydb -f {{ mtm_file }}
    register: out

  - debug:
      msg: "{{out.stdout_lines}} {{out.stderr_lines}}"

- name: Enable monitoring
  hosts: init1,init2
  remote_user: postgres
  environment:
    PATH: "{{ ansible_env.PATH }}:/home/postgres/pgsql/bin"
  tags: monitoring
  tasks:
  - name: Copy monitoring.sql
    copy:
      src: "{{ item }}"
      dest: /home/postgres/
      owner: postgres
    with_items:
      - monitoring.sql

  - name: Add monitoring
    shell: psql -U mtmuser -d mydb -f monitoring.sql
    register: out

  - debug:
      msg: "{{out.stdout_lines}} {{out.stderr_lines}}"

# Check statuses of mm clusters       
- name: Status multimasters 
  hosts: init1, init2
  remote_user: postgres
  environment:
    PATH: "{{ ansible_env.PATH }}:/home/postgres/pgsql/bin"
  tags: checkmm
  tasks:
  - name: Check multimasters
    shell: psql -U mtmuser -d mydb -c "SELECT * FROM mtm.status()"
    register: out

  - debug:
      msg: "{{out.stdout_lines}} {{out.stderr_lines}}"

  - name: Check nodes
    shell: psql -U mtmuser -d mydb -c "SELECT * FROM mtm.nodes()"
    register: out

  - debug:
      msg: "{{out.stdout_lines}} {{out.stderr_lines}}"
